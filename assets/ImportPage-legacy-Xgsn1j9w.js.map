{"version":3,"file":"ImportPage-legacy-Xgsn1j9w.js","sources":["../../src/components/ImportPage.vue"],"sourcesContent":["<template>\n    <div class=\"text-center\">\n        <form>\n            <div>\n                <input ref=\"fileSelector\" type=\"file\" @change=\"fileChange\" />\n            </div>\n            <div>\n                <strong v-text=\"`Selected Subscriptions: ${selectedSubscriptions}`\" />\n            </div>\n            <div>\n                <strong>Override: <input v-model=\"override\" class=\"checkbox\" type=\"checkbox\" /></strong>\n            </div>\n            <div>\n                <a class=\"btn w-auto\" @click=\"handleImport\">Import</a>\n            </div>\n        </form>\n        <br />\n        <strong>Importing Subscriptions from YouTube</strong>\n        <br />\n        <div>\n            Open\n            <a href=\"https://takeout.google.com/takeout/custom/youtube\">takeout.google.com/takeout/custom/youtube</a>\n            <br />\n            In \"Select data to include\", click on \"All YouTube data included\" and select only \"subscriptions\".\n            <br />\n            Create the export and download the zip file.\n            <br />\n            Extract subscriptions.csv from the zip file.\n            <br />\n            Select and import the file above.\n        </div>\n        <br />\n        <strong>Importing Subscriptions from Invidious</strong>\n        <br />\n        <div>\n            Open\n            <a href=\"https://invidio.us/data_control\">invidiou.us/data_control</a>\n            <br />\n            Click on any of the export options.\n            <br />\n            Select and import the file above.\n        </div>\n        <br />\n        <strong>Importing Subscriptions from NewPipe</strong>\n        <br />\n        <div>\n            Go to the Feed tab.\n            <br />\n            Click on the arrow on where it says \"Subscriptions\".\n            <br />\n            Save the file somewhere.\n            <br />\n            Select and import the file above.\n        </div>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            subscriptions: [],\n            override: false,\n        };\n    },\n    computed: {\n        selectedSubscriptions() {\n            return this.subscriptions.length;\n        },\n    },\n    activated() {\n        document.title = \"Import - Piped\";\n    },\n    methods: {\n        fileChange() {\n            const file = this.$refs.fileSelector.files[0];\n            file.text().then(text => {\n                this.subscriptions = [];\n\n                // Invidious\n                if (text.indexOf(\"opml\") != -1) {\n                    const parser = new DOMParser();\n                    const xmlDoc = parser.parseFromString(text, \"text/xml\");\n                    xmlDoc.querySelectorAll(\"outline[xmlUrl]\").forEach(item => {\n                        const url = item.getAttribute(\"xmlUrl\");\n                        const id = url.slice(-24);\n                        this.subscriptions.push(id);\n                    });\n                }\n                // NewPipe\n                else if (text.indexOf(\"subscriptions\") != -1) {\n                    const json = JSON.parse(text);\n                    json.subscriptions\n                        // if service_id is undefined, chances are it's a freetube export\n                        .filter(item => item.service_id == 0 || item.service_id == undefined)\n                        .forEach(item => {\n                            const url = item.url;\n                            const id = url.slice(-24);\n                            this.subscriptions.push(id);\n                        });\n                }\n                // Invidious JSON\n                else if (text.indexOf(\"thin_mode\") != -1) {\n                    const json = JSON.parse(text);\n                    this.subscriptions = json.subscriptions;\n                }\n                // FreeTube DB\n                else if (text.indexOf(\"allChannels\") != -1) {\n                    const lines = text.split(\"\\n\");\n                    for (let line of lines) {\n                        if (line === \"\") continue;\n                        const json = JSON.parse(line);\n                        json.subscriptions.forEach(item => {\n                            this.subscriptions.push(item.id);\n                        });\n                    }\n                }\n                // Google Takeout JSON\n                else if (text.indexOf(\"contentDetails\") != -1) {\n                    const json = JSON.parse(text);\n                    json.forEach(item => {\n                        const id = item.snippet.resourceId.channelId;\n                        this.subscriptions.push(id);\n                    });\n                }\n\n                // Google Takeout CSV\n                else if (file.name.length >= 5 && file.name.slice(-4).toLowerCase() == \".csv\") {\n                    const lines = text.split(\"\\n\");\n                    for (let i = 1; i < lines.length; i++) {\n                        const line = lines[i];\n                        const id = line.slice(0, line.indexOf(\",\"));\n                        if (id.length === 24) this.subscriptions.push(id);\n                    }\n                }\n            });\n        },\n        handleImport() {\n            if (this.authenticated) {\n                this.fetchJson(\n                    this.authApiUrl() + \"/import\",\n                    {\n                        override: this.override,\n                    },\n                    {\n                        method: \"POST\",\n                        headers: {\n                            Authorization: this.getAuthToken(),\n                        },\n                        body: JSON.stringify(this.subscriptions),\n                    },\n                ).then(json => {\n                    if (json.message === \"ok\") window.location = \"/feed\";\n                });\n            } else {\n                this.importSubscriptionsLocally(this.subscriptions);\n                window.location = \"/feed\";\n            }\n        },\n        importSubscriptionsLocally(newChannels) {\n            const subscriptions = this.override\n                ? [...new Set(newChannels)]\n                : [...new Set((this.getLocalSubscriptions() ?? []).concat(newChannels))];\n            // Sort for better cache hits\n            subscriptions.sort();\n            try {\n                localStorage.setItem(\"localSubscriptions\", JSON.stringify(subscriptions));\n            } catch (e) {\n                alert(this.$t(\"info.local_storage\"));\n            }\n        },\n    },\n};\n</script>\n"],"names":["_sfc_main","data","subscriptions","override","computed","selectedSubscriptions","this","length","activated","document","title","methods","fileChange","file","$refs","fileSelector","files","text","then","indexOf","DOMParser","parseFromString","querySelectorAll","forEach","item","id","getAttribute","slice","push","JSON","parse","filter","service_id","undefined","url","json","lines","split","line","snippet","resourceId","channelId","name","toLowerCase","i","handleImport","authenticated","fetchJson","authApiUrl","method","headers","Authorization","getAuthToken","body","stringify","message","window","location","importSubscriptionsLocally","newChannels","Set","getLocalSubscriptions","concat","sort","localStorage","setItem","e","alert","$t","_hoisted_1","class","_hoisted_2","_hoisted_3","_createStaticVNode","_openBlock","_createElementBlock","_createElementVNode","ref","type","onChange","$options","args","textContent","_toDisplayString","_createTextVNode","_cache","$event","$data","onClick"],"mappings":"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"}