{"version":3,"file":"ImportPage-ChLRnFNa.js","sources":["../../src/components/ImportPage.vue"],"sourcesContent":["<template>\n    <div class=\"text-center\">\n        <form>\n            <div>\n                <input ref=\"fileSelector\" type=\"file\" @change=\"fileChange\" />\n            </div>\n            <div>\n                <strong v-text=\"`Selected Subscriptions: ${selectedSubscriptions}`\" />\n            </div>\n            <div>\n                <strong>Override: <input v-model=\"override\" class=\"checkbox\" type=\"checkbox\" /></strong>\n            </div>\n            <div>\n                <a class=\"btn w-auto\" @click=\"handleImport\">Import</a>\n            </div>\n        </form>\n        <br />\n        <strong>Importing Subscriptions from YouTube</strong>\n        <br />\n        <div>\n            Open\n            <a href=\"https://takeout.google.com/takeout/custom/youtube\">takeout.google.com/takeout/custom/youtube</a>\n            <br />\n            In \"Select data to include\", click on \"All YouTube data included\" and select only \"subscriptions\".\n            <br />\n            Create the export and download the zip file.\n            <br />\n            Extract subscriptions.csv from the zip file.\n            <br />\n            Select and import the file above.\n        </div>\n        <br />\n        <strong>Importing Subscriptions from Invidious</strong>\n        <br />\n        <div>\n            Open\n            <a href=\"https://invidio.us/data_control\">invidiou.us/data_control</a>\n            <br />\n            Click on any of the export options.\n            <br />\n            Select and import the file above.\n        </div>\n        <br />\n        <strong>Importing Subscriptions from NewPipe</strong>\n        <br />\n        <div>\n            Go to the Feed tab.\n            <br />\n            Click on the arrow on where it says \"Subscriptions\".\n            <br />\n            Save the file somewhere.\n            <br />\n            Select and import the file above.\n        </div>\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n            subscriptions: [],\n            override: false,\n        };\n    },\n    computed: {\n        selectedSubscriptions() {\n            return this.subscriptions.length;\n        },\n    },\n    activated() {\n        document.title = \"Import - Piped\";\n    },\n    methods: {\n        fileChange() {\n            const file = this.$refs.fileSelector.files[0];\n            file.text().then(text => {\n                this.subscriptions = [];\n\n                // Invidious\n                if (text.indexOf(\"opml\") != -1) {\n                    const parser = new DOMParser();\n                    const xmlDoc = parser.parseFromString(text, \"text/xml\");\n                    xmlDoc.querySelectorAll(\"outline[xmlUrl]\").forEach(item => {\n                        const url = item.getAttribute(\"xmlUrl\");\n                        const id = url.slice(-24);\n                        this.subscriptions.push(id);\n                    });\n                }\n                // NewPipe\n                else if (text.indexOf(\"subscriptions\") != -1) {\n                    const json = JSON.parse(text);\n                    json.subscriptions\n                        // if service_id is undefined, chances are it's a freetube export\n                        .filter(item => item.service_id == 0 || item.service_id == undefined)\n                        .forEach(item => {\n                            const url = item.url;\n                            const id = url.slice(-24);\n                            this.subscriptions.push(id);\n                        });\n                }\n                // Invidious JSON\n                else if (text.indexOf(\"thin_mode\") != -1) {\n                    const json = JSON.parse(text);\n                    this.subscriptions = json.subscriptions;\n                }\n                // FreeTube DB\n                else if (text.indexOf(\"allChannels\") != -1) {\n                    const lines = text.split(\"\\n\");\n                    for (let line of lines) {\n                        if (line === \"\") continue;\n                        const json = JSON.parse(line);\n                        json.subscriptions.forEach(item => {\n                            this.subscriptions.push(item.id);\n                        });\n                    }\n                }\n                // Google Takeout JSON\n                else if (text.indexOf(\"contentDetails\") != -1) {\n                    const json = JSON.parse(text);\n                    json.forEach(item => {\n                        const id = item.snippet.resourceId.channelId;\n                        this.subscriptions.push(id);\n                    });\n                }\n\n                // Google Takeout CSV\n                else if (file.name.length >= 5 && file.name.slice(-4).toLowerCase() == \".csv\") {\n                    const lines = text.split(\"\\n\");\n                    for (let i = 1; i < lines.length; i++) {\n                        const line = lines[i];\n                        const id = line.slice(0, line.indexOf(\",\"));\n                        if (id.length === 24) this.subscriptions.push(id);\n                    }\n                }\n            });\n        },\n        handleImport() {\n            if (this.authenticated) {\n                this.fetchJson(\n                    this.authApiUrl() + \"/import\",\n                    {\n                        override: this.override,\n                    },\n                    {\n                        method: \"POST\",\n                        headers: {\n                            Authorization: this.getAuthToken(),\n                        },\n                        body: JSON.stringify(this.subscriptions),\n                    },\n                ).then(json => {\n                    if (json.message === \"ok\") window.location = \"/feed\";\n                });\n            } else {\n                this.importSubscriptionsLocally(this.subscriptions);\n                window.location = \"/feed\";\n            }\n        },\n        importSubscriptionsLocally(newChannels) {\n            const subscriptions = this.override\n                ? [...new Set(newChannels)]\n                : [...new Set((this.getLocalSubscriptions() ?? []).concat(newChannels))];\n            // Sort for better cache hits\n            subscriptions.sort();\n            try {\n                localStorage.setItem(\"localSubscriptions\", JSON.stringify(subscriptions));\n            } catch (e) {\n                alert(this.$t(\"info.local_storage\"));\n            }\n        },\n    },\n};\n</script>\n"],"names":["_sfc_main","file","text","item","id","json","lines","line","i","newChannels","subscriptions","_a","e","_hoisted_1","_hoisted_2","_hoisted_3","_createStaticVNode","_openBlock","_createElementBlock","_createElementVNode","$options","args","_toDisplayString","_createTextVNode","_cache","$event","$data"],"mappings":"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"}