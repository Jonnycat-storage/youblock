{"version":3,"file":"DashUtils-legacy-CNwiZbwj.js","sources":["../../src/utils/DashUtils.js","../../node_modules/fast-xml-parser/src/util.js","../../node_modules/fast-xml-parser/src/validator.js","../../node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js","../../node_modules/fast-xml-parser/src/xmlparser/xmlNode.js","../../node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js","../../node_modules/strnum/strnum.js","../../node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js","../../node_modules/fast-xml-parser/src/xmlparser/node2json.js","../../node_modules/fast-xml-parser/src/xmlparser/XMLParser.js","../../node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js","../../node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js","../../node_modules/fast-xml-parser/src/fxp.js"],"sourcesContent":["// Based of https://github.com/GilgusMaximus/yt-dash-manifest-generator/blob/master/src/DashGenerator.js\nimport { XMLBuilder } from \"fast-xml-parser\";\n\nexport function generate_dash_file_from_formats(VideoFormats, VideoLength) {\n    const generatedJSON = generate_xmljs_json_from_data(VideoFormats, VideoLength);\n    const builder = new XMLBuilder({\n        ignoreAttributes: false,\n        allowBooleanAttributes: true,\n        suppressBooleanAttributes: false,\n        attributeNamePrefix: \"_\",\n    });\n    return builder.build(generatedJSON);\n}\n\nfunction generate_xmljs_json_from_data(VideoFormatArray, VideoLength) {\n    const convertJSON = {\n        \"?xml\": {\n            _version: \"1.0\",\n            _encoding: \"utf-8\",\n            MPD: {\n                _xmlns: \"urn:mpeg:dash:schema:mpd:2011\",\n                _profiles: \"urn:mpeg:dash:profile:full:2011\",\n                _minBufferTime: \"PT1.5S\",\n                _type: \"static\",\n                _mediaPresentationDuration: `PT${VideoLength}S`,\n                Period: {\n                    AdaptationSet: generate_adaptation_set(VideoFormatArray),\n                },\n            },\n        },\n    };\n    return convertJSON;\n}\n\nfunction generate_adaptation_set(VideoFormatArray) {\n    const adaptationSets = [];\n\n    let mimeAudioObjs = [];\n\n    VideoFormatArray.forEach(videoFormat => {\n        // the dual formats should not be used\n        if (\n            (videoFormat.mimeType.includes(\"video\") && !videoFormat.videoOnly) ||\n            videoFormat.mimeType.includes(\"application\")\n        ) {\n            return;\n        }\n\n        const audioTrackId = videoFormat.audioTrackId;\n        const mimeType = videoFormat.mimeType;\n\n        for (let i = 0; i < mimeAudioObjs.length; i++) {\n            const mimeAudioObj = mimeAudioObjs[i];\n\n            if (mimeAudioObj.audioTrackId == audioTrackId && mimeAudioObj.mimeType == mimeType) {\n                mimeAudioObj.videoFormats.push(videoFormat);\n                return;\n            }\n        }\n\n        mimeAudioObjs.push({\n            audioTrackId,\n            mimeType,\n            videoFormats: [videoFormat],\n        });\n    });\n\n    mimeAudioObjs.forEach(mimeAudioObj => {\n        const adapSet = {\n            _id: mimeAudioObj.audioTrackId,\n            _lang: mimeAudioObj.audioTrackId?.substr(0, 2),\n            _mimeType: mimeAudioObj.mimeType,\n            _startWithSAP: \"1\",\n            _subsegmentAlignment: \"true\",\n            Representation: [],\n        };\n\n        let isVideoFormat = false;\n\n        if (mimeAudioObj.mimeType.includes(\"video\")) {\n            isVideoFormat = true;\n            adapSet[\"_scanType\"] = \"progressive\";\n        }\n\n        for (var i = 0; i < mimeAudioObj.videoFormats.length; i++) {\n            const videoFormat = mimeAudioObj.videoFormats[i];\n            if (isVideoFormat) {\n                adapSet.Representation.push(generate_representation_video(videoFormat));\n            } else {\n                adapSet.Representation.push(generate_representation_audio(videoFormat));\n            }\n        }\n\n        adaptationSets.push(adapSet);\n    });\n    return adaptationSets;\n}\n\nfunction generate_representation_audio(Format) {\n    const representation = {\n        _id: Format.itag,\n        _codecs: Format.codec,\n        _bandwidth: Format.bitrate,\n        AudioChannelConfiguration: {\n            _schemeIdUri: \"urn:mpeg:dash:23003:3:audio_channel_configuration:2011\",\n            _value: \"2\",\n        },\n        BaseURL: Format.url,\n        SegmentBase: {\n            _indexRange: `${Format.indexStart}-${Format.indexEnd}`,\n            Initialization: {\n                _range: `${Format.initStart}-${Format.initEnd}`,\n            },\n        },\n    };\n    return representation;\n}\n\nfunction generate_representation_video(Format) {\n    const representation = {\n        _id: Format.itag,\n        _codecs: Format.codec,\n        _bandwidth: Format.bitrate,\n        _width: Format.width,\n        _height: Format.height,\n        _maxPlayoutRate: \"1\",\n        _frameRate: Format.fps,\n        BaseURL: Format.url,\n        SegmentBase: {\n            _indexRange: `${Format.indexStart}-${Format.indexEnd}`,\n            Initialization: {\n                _range: `${Format.initStart}-${Format.initEnd}`,\n            },\n        },\n    };\n    return representation;\n}\n","'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n","'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else if (tags.length === 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' has not been opened.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n","\nconst defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true,\n      eNotation: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false,\n    transformTagName: false,\n    transformAttributeName: false,\n    updateTag: function(tagName, jPath, attrs){\n      return tagName\n    },\n    // skipEmptyListItem: false\n};\n   \nconst buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n\nexports.buildOptions = buildOptions;\nexports.defaultOptions = defaultOptions;","'use strict';\n\nclass XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    if(key === \"__proto__\") key = \"#__proto__\";\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node.tagname === \"__proto__\") node.tagname = \"#__proto__\";\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  };\n};\n\n\nmodule.exports = XmlNode;","const util = require('../util');\n\n//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<' && !comment) { //Determine the tag type\n                if( hasBody && isEntity(xmlData, i)){\n                    i += 7; \n                    [entityName, val,i] = readEntityExp(xmlData,i+1);\n                    if(val.indexOf(\"&\") === -1) //Parameter entities are not supported\n                        entities[ validateEntityName(entityName) ] = {\n                            regx : RegExp( `&${entityName};`,\"g\"),\n                            val: val\n                        };\n                }\n                else if( hasBody && isElement(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isAttlist(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isNotation(xmlData, i)) i += 9;//Not supported\n                else if( isComment)                         comment = true;\n                else                                        throw new Error(\"Invalid DOCTYPE\");\n\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') { //Read tag content\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                        angleBracketsCount--;\n                    }\n                }else{\n                    angleBracketsCount--;\n                }\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nfunction readEntityExp(xmlData,i){\n    //External entities are not supported\n    //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\n\n    //Parameter entities are not supported\n    //    <!ENTITY entityname \"&anotherElement;\">\n\n    //Internal entities are supported\n    //    <!ENTITY entityname \"replacement text\">\n    \n    //read EntityName\n    let entityName = \"\";\n    for (; i < xmlData.length && (xmlData[i] !== \"'\" && xmlData[i] !== '\"' ); i++) {\n        // if(xmlData[i] === \" \") continue;\n        // else \n        entityName += xmlData[i];\n    }\n    entityName = entityName.trim();\n    if(entityName.indexOf(\" \") !== -1) throw new Error(\"External entites are not supported\");\n\n    //read Entity Value\n    const startChar = xmlData[i++];\n    let val = \"\"\n    for (; i < xmlData.length && xmlData[i] !== startChar ; i++) {\n        val += xmlData[i];\n    }\n    return [entityName, val, i];\n}\n\nfunction isComment(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === '-' &&\n    xmlData[i+3] === '-') return true\n    return false\n}\nfunction isEntity(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'N' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'I' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'Y') return true\n    return false\n}\nfunction isElement(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'L' &&\n    xmlData[i+4] === 'E' &&\n    xmlData[i+5] === 'M' &&\n    xmlData[i+6] === 'E' &&\n    xmlData[i+7] === 'N' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\n\nfunction isAttlist(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'A' &&\n    xmlData[i+3] === 'T' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'L' &&\n    xmlData[i+6] === 'I' &&\n    xmlData[i+7] === 'S' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\nfunction isNotation(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'N' &&\n    xmlData[i+3] === 'O' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'A' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'I' &&\n    xmlData[i+8] === 'O' &&\n    xmlData[i+9] === 'N') return true\n    return false\n}\n\nfunction validateEntityName(name){\n    if (util.isName(name))\n\treturn name;\n    else\n        throw new Error(`Invalid entity name ${name}`);\n}\n\nmodule.exports = readDocType;\n","const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/;\n// const octRegex = /0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n    Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n    Number.parseFloat = window.parseFloat;\n}\n\n  \nconst consider = {\n    hex :  true,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    // const options = Object.assign({}, consider);\n    // if(opt.leadingZeros === false){\n    //     options.leadingZeros = false;\n    // }else if(opt.hex === false){\n    //     options.hex = false;\n    // }\n\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    // if(trimmedStr === \"0.0\") return 0;\n    // else if(trimmedStr === \"+0.0\") return 0;\n    // else if(trimmedStr === \"-0.0\") return -0;\n\n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return Number.parseInt(trimmedStr, 16);\n    // } else if (options.parseOct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            const eNotation = match[4] || match[6];\n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(eNotation){ //given number has enotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    // const decimalPart = match[5].substr(1);\n                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf(\".\"));\n\n                    \n                    // const p = numStr.indexOf(\".\");\n                    // const givenIntPart = numStr.substr(0,p);\n                    // const givenDecPart = numStr.substr(p+1);\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    // if(numTrimmedByZeros === numStr){\n                    //     if(options.leadingZeros) return num;\n                    //     else return str;\n                    // }else return str;\n                    if(numTrimmedByZeros === numStr) return num;\n                    else if(sign+numTrimmedByZeros === numStr) return num;\n                    else return str;\n                }\n\n                if(trimmedStr === numStr) return num;\n                else if(trimmedStr === sign+numStr) return num;\n                // else{\n                //     //number with +/- sign\n                //     trimmedStr.test(/[-+][0-9]);\n\n                // }\n                return str;\n            }\n            // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;\n            \n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\nmodule.exports = toNumber\n","'use strict';\n///@ts-check\n\nconst util = require('../util');\nconst xmlNode = require('./xmlNode');\nconst readDocType = require(\"./DocTypeReader\");\nconst toNumber = require(\"strnum\");\n\n// const regx =\n//   '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n//   .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n      \"num_dec\": { regex: /&#([0-9]{1,7});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 10)) },\n      \"num_hex\": { regex: /&#x([0-9a-fA-F]{1,6});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 16)) },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n    this.addChild = addChild;\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath, tagName) {\n  if (!this.options.ignoreAttributes && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      let oldVal = matches[i][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if(aName === \"__proto__\") aName  = \"#__proto__\";\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        //check if last tag of nested tag was unpaired tag\n        const lastTagName = jPath.substring(jPath.lastIndexOf(\".\")+1);\n        if(tagName && this.options.unpairedTags.indexOf(tagName) !== -1 ){\n          throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);\n        }\n        let propIndex = 0\n        if(lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1 ){\n          propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.')-1)\n          this.tagsNodeStack.pop();\n        }else{\n          propIndex = jPath.lastIndexOf(\".\");\n        }\n        jPath = jPath.substring(0, propIndex);\n\n        currentNode = this.tagsNodeStack.pop();//avoid recursion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\n          }\n          this.addChild(currentNode, childNode, jPath)\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true, true);\n        if(val == undefined) val = \"\";\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        let result = readTagExp(xmlData,i, this.options.removeNSPrefix);\n        let tagName= result.tagName;\n        const rawTagName = result.rawTagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n          jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\n        }\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            i = result.closeIndex;\n          }\n          //unpaired tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            \n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${rawTagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          this.addChild(currentNode, childNode, jPath)\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            \n            if(this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nfunction addChild(currentNode, childNode, jPath){\n  const result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"])\n  if(result === false){\n  }else if(typeof result === \"string\"){\n    childNode.tagname = result\n    currentNode.addChild(childNode);\n  }else{\n    currentNode.addChild(childNode);\n  }\n}\n\nconst replaceEntitiesValue = function(val){\n\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = Object.keys(currentNode.child).length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-double quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substring(0, separatorIndex);\n    tagExp = tagExp.substring(separatorIndex + 1).trimStart();\n  }\n\n  const rawTagName = tagName;\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n    rawTagName: rawTagName,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {//close tag\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else if(xmlData[i+1] === '?') { \n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 2) === '![') { \n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n\nmodule.exports = OrderedObjParser;\n","'use strict';\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nfunction prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const { textNodeName } = options;\n  const propCount = Object.keys(obj).length;\n  \n  if (propCount === 0) {\n    return true;\n  }\n\n  if (\n    propCount === 1 &&\n    (obj[textNodeName] || typeof obj[textNodeName] === \"boolean\" || obj[textNodeName] === 0)\n  ) {\n    return true;\n  }\n\n  return false;\n}\nexports.prettify = prettify;\n","const { buildOptions} = require(\"./OptionsBuilder\");\nconst OrderedObjParser = require(\"./OrderedObjParser\");\nconst { prettify} = require(\"./node2json\");\nconst validator = require('../validator');\n\nclass XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validator.validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else if(value === \"&\"){\n            throw new Error(\"An entity with value '&' is not permitted\");\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}\n\nmodule.exports = XMLParser;","const EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nfunction toXml(jArray, options) {\n    let indentation = \"\";\n    if (options.format && options.indentBy.length > 0) {\n        indentation = EOL;\n    }\n    return arrToStr(jArray, options, \"\", indentation);\n}\n\nfunction arrToStr(arr, options, jPath, indentation) {\n    let xmlStr = \"\";\n    let isPreviousElementTag = false;\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        if(tagName === undefined) continue;\n\n        let newJPath = \"\";\n        if (jPath.length === 0) newJPath = tagName\n        else newJPath = `${jPath}.${tagName}`;\n\n        if (tagName === options.textNodeName) {\n            let tagText = tagObj[tagName];\n            if (!isStopNode(newJPath, options)) {\n                tagText = options.tagValueProcessor(tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += tagText;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.cdataPropName) {\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.commentPropName) {\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            isPreviousElementTag = true;\n            continue;\n        } else if (tagName[0] === \"?\") {\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n            isPreviousElementTag = true;\n            continue;\n        }\n        let newIdentation = indentation;\n        if (newIdentation !== \"\") {\n            newIdentation += options.indentBy;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        const tagStart = indentation + `<${tagName}${attStr}`;\n        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);\n        if (options.unpairedTags.indexOf(tagName) !== -1) {\n            if (options.suppressUnpairedNode) xmlStr += tagStart + \">\";\n            else xmlStr += tagStart + \"/>\";\n        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {\n            xmlStr += tagStart + \"/>\";\n        } else if (tagValue && tagValue.endsWith(\">\")) {\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;\n        } else {\n            xmlStr += tagStart + \">\";\n            if (tagValue && indentation !== \"\" && (tagValue.includes(\"/>\") || tagValue.includes(\"</\"))) {\n                xmlStr += indentation + options.indentBy + tagValue + indentation;\n            } else {\n                xmlStr += tagValue;\n            }\n            xmlStr += `</${tagName}>`;\n        }\n        isPreviousElementTag = true;\n    }\n\n    return xmlStr;\n}\n\nfunction propName(obj) {\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if(!obj.hasOwnProperty(key)) continue;\n        if (key !== \":@\") return key;\n    }\n}\n\nfunction attr_to_str(attrMap, options) {\n    let attrStr = \"\";\n    if (attrMap && !options.ignoreAttributes) {\n        for (let attr in attrMap) {\n            if(!attrMap.hasOwnProperty(attr)) continue;\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if (attrVal === true && options.suppressBooleanAttributes) {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            } else {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\n\nfunction isStopNode(jPath, options) {\n    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for (let index in options.stopNodes) {\n        if (options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\" + tagName) return true;\n    }\n    return false;\n}\n\nfunction replaceEntitiesValue(textValue, options) {\n    if (textValue && textValue.length > 0 && options.processEntities) {\n        for (let i = 0; i < options.entities.length; i++) {\n            const entity = options.entities[i];\n            textValue = textValue.replace(entity.regex, entity.val);\n        }\n    }\n    return textValue;\n}\nmodule.exports = toXml;\n","'use strict';\n//parse Empty Node as self closing node\nconst buildFromOrderedJs = require('./orderedJs2Xml');\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function(key, a) {\n    return a;\n  },\n  attributeValueProcessor: function(attrName, a) {\n    return a;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },//it must be on top\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\n    { regex: new RegExp(\"\\'\", \"g\"), val: \"&apos;\" },\n    { regex: new RegExp(\"\\\"\", \"g\"), val: \"&quot;\" }\n  ],\n  processEntities: true,\n  stopNodes: [],\n  // transformTagName: false,\n  // transformAttributeName: false,\n  oneListGroup: false\n};\n\nfunction Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes || this.options.attributesGroupName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n}\n\nBuilder.prototype.build = function(jObj) {\n  if(this.options.preserveOrder){\n    return buildFromOrderedJs(jObj, this.options);\n  }else {\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\n      jObj = {\n        [this.options.arrayNodeName] : jObj\n      }\n    }\n    return this.j2x(jObj, 0).val;\n  }\n};\n\nBuilder.prototype.j2x = function(jObj, level) {\n  let attrStr = '';\n  let val = '';\n  for (let key in jObj) {\n    if(!Object.prototype.hasOwnProperty.call(jObj, key)) continue;\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node only if it is not an attribute\n      if (this.isAttribute(key)) {\n        val += '';\n      }\n    } else if (jObj[key] === null) {\n      // null attribute should be ignored by the attribute list, but should not cause the tag closing\n      if (this.isAttribute(key)) {\n        val += '';\n      } else if (key[0] === '?') {\n        val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n      } else {\n        val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n      }\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextValNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr) {\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\n      }else {\n        //tag value\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\n          val += this.replaceEntitiesValue(newval);\n        } else {\n          val += this.buildTextValNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      let listTagVal = \"\";\n      let listTagAttr = \"\";\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          if(this.options.oneListGroup){\n            const result = this.j2x(item, level + 1);\n            listTagVal += result.val;\n            if (this.options.attributesGroupName && item.hasOwnProperty(this.options.attributesGroupName)) {\n              listTagAttr += result.attrStr\n            }\n          }else{\n            listTagVal += this.processTextOrObjNode(item, key, level)\n          }\n        } else {\n          if (this.options.oneListGroup) {\n            let textValue = this.options.tagValueProcessor(key, item);\n            textValue = this.replaceEntitiesValue(textValue);\n            listTagVal += textValue;\n          } else {\n            listTagVal += this.buildTextValNode(item, key, '', level);\n          }\n        }\n      }\n      if(this.options.oneListGroup){\n        listTagVal = this.buildObjectNode(listTagVal, key, listTagAttr, level);\n      }\n      val += listTagVal;\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nBuilder.prototype.buildAttrPairStr = function(attrName, val){\n  val = this.options.attributeValueProcessor(attrName, '' + val);\n  val = this.replaceEntitiesValue(val);\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\n    return ' ' + attrName;\n  } else return ' ' + attrName + '=\"' + val + '\"';\n}\n\nfunction processTextOrObjNode (object, key, level) {\n  const result = this.j2x(object, level + 1);\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);\n  } else {\n    return this.buildObjectNode(result.val, key, result.attrStr, level);\n  }\n}\n\nBuilder.prototype.buildObjectNode = function(val, key, attrStr, level) {\n  if(val === \"\"){\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }\n  }else{\n\n    let tagEndExp = '</' + key + this.tagEndChar;\n    let piClosingChar = \"\";\n    \n    if(key[0] === \"?\") {\n      piClosingChar = \"?\";\n      tagEndExp = \"\";\n    }\n  \n    // attrStr is an empty string in case the attribute came as undefined or null\n    if ((attrStr || attrStr === '') && val.indexOf('<') === -1) {\n      return ( this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' + val + tagEndExp );\n    } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n      return this.indentate(level) + `<!--${val}-->` + this.newLine;\n    }else {\n      return (\n        this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +\n        val +\n        this.indentate(level) + tagEndExp    );\n    }\n  }\n}\n\nBuilder.prototype.closeTag = function(key){\n  let closeTag = \"\";\n  if(this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n    if(!this.options.suppressUnpairedNode) closeTag = \"/\"\n  }else if(this.options.suppressEmptyNode){ //empty\n    closeTag = \"/\";\n  }else{\n    closeTag = `></${key}`\n  }\n  return closeTag;\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n      // return this.buildTagStr(level,key, attrStr);\n    }\n  }\n}\n\nBuilder.prototype.buildTextValNode = function(val, key, attrStr, level) {\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n    return this.indentate(level) + `<![CDATA[${val}]]>` +  this.newLine;\n  }else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n    return this.indentate(level) + `<!--${val}-->` +  this.newLine;\n  }else if(key[0] === \"?\") {//PI tag\n    return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; \n  }else{\n    let textValue = this.options.tagValueProcessor(key, val);\n    textValue = this.replaceEntitiesValue(textValue);\n  \n    if( textValue === ''){\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }else{\n      return this.indentate(level) + '<' + key + attrStr + '>' +\n         textValue +\n        '</' + key + this.tagEndChar;\n    }\n  }\n}\n\nBuilder.prototype.replaceEntitiesValue = function(textValue){\n  if(textValue && textValue.length > 0 && this.options.processEntities){\n    for (let i=0; i<this.options.entities.length; i++) {\n      const entity = this.options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix) && name !== this.options.textNodeName) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = Builder;\n","'use strict';\n\nconst validator = require('./validator');\nconst XMLParser = require('./xmlparser/XMLParser');\nconst XMLBuilder = require('./xmlbuilder/json2xml');\n\nmodule.exports = {\n  XMLParser: XMLParser,\n  XMLValidator: validator,\n  XMLBuilder: XMLBuilder\n}"],"names":["VideoFormats","VideoLength","generatedJSON","VideoFormatArray","convertJSON","_version","_encoding","MPD","_xmlns","_profiles","_minBufferTime","_type","_mediaPresentationDuration","Period","AdaptationSet","generate_adaptation_set","generate_xmljs_json_from_data","XMLBuilder","ignoreAttributes","allowBooleanAttributes","suppressBooleanAttributes","attributeNamePrefix","build","nameStartChar","nameRegexp","regexName","RegExp","exports","isExist","v","isEmptyObject","obj","Object","keys","length","merge","target","a","arrayMode","len","i","getValue","isName","string","match","exec","getAllMatches","regex","matches","allmatches","startIndex","lastIndex","index","push","util","require$$0","defaultOptions","unpairedTags","isWhiteSpace","char","readPI","xmlData","start","tagname","substr","getErrorObject","getLineNumberForPosition","readCommentAndCDATA","angleBracketsCount","validator","validate","options","assign","tags","tagFound","reachedRoot","err","tagStartPos","closingTag","tagName","trim","substring","msg","result","readAttributeStr","attrStr","value","attrStrStart","isValid","validateAttributeString","code","line","tagClosed","otg","pop","openPos","col","indexOf","afterAmp","validateAmpersand","JSON","stringify","map","t","replace","doubleQuote","singleQuote","startChar","validAttrStrRegxp","attrNames","getPositionFromMatch","undefined","attrName","validateAttrName","hasOwnProperty","re","validateNumberAmpersand","count","message","lineNumber","lines","split","preserveOrder","attributesGroupName","textNodeName","removeNSPrefix","parseTagValue","parseAttributeValue","trimValues","cdataPropName","numberParseOptions","hex","leadingZeros","eNotation","tagValueProcessor","val","attributeValueProcessor","stopNodes","alwaysCreateTextNode","isArray","commentPropName","processEntities","htmlEntities","ignoreDeclaration","ignorePiTags","transformTagName","transformAttributeName","updateTag","jPath","attrs","OptionsBuilder","buildOptions","xmlNode","constructor","this","child","add","key","addChild","node","readEntityExp","entityName","Error","isComment","isEntity","isElement","isAttlist","isNotation","validateEntityName","name","DocTypeReader","entities","hasBody","comment","exp","regx","hexRegex","numRegex","Number","parseInt","window","parseFloat","consider","decimalPoint","require$$1","readDocType","require$$2","toNumber","str","trimmedStr","skipLike","test","sign","numTrimmedByZeros","numStr","num","search","addExternalEntities","externalEntities","entKeys","ent","lastEntities","parseTextData","dontTrim","hasAttributes","isLeafNode","escapeEntities","replaceEntitiesValue","newval","parseValue","resolveNameSpace","prefix","charAt","attrsRegx","buildAttributesMap","oldVal","aName","newVal","attrCollection","parseXml","xmlObj","currentNode","textData","closeIndex","findClosingIndex","colonIndex","saveTextToParentTag","lastTagName","lastIndexOf","propIndex","tagsNodeStack","tagData","readTagExp","childNode","tagExp","attrExpPresent","endIndex","docTypeEntities","rawTagName","lastTag","isItStopNode","tagContent","readStopNodeData","entity","ampEntity","currentTagName","allNodesExp","stopNodePath","stopNodeExp","errMsg","closingIndex","closingChar","attrBoundary","ch","data","tagExpWithClosingIndex","separatorIndex","trimStart","openTagCount","shouldParse","OrderedObjParser_1","apos","gt","lt","quot","space","cent","pound","yen","euro","copyright","reg","inr","num_dec","_","String","fromCharCode","num_hex","compress","arr","text","compressedObj","tagObj","property","propName","newJpath","isLeaf","isLeafTag","assignAttributes","Array","attrMap","jpath","atrrName","propCount","node2json","prettify","OrderedObjParser","require$$3","XMLParser_1","parse","validationOption","toString","orderedObjParser","orderedResult","addEntity","arrToStr","indentation","xmlStr","isPreviousElementTag","newJPath","tagText","isStopNode","attStr","attr_to_str","tempInd","piTextNodeName","newIdentation","indentBy","tagStart","tagValue","suppressUnpairedNode","suppressEmptyNode","endsWith","includes","attr","attrVal","textValue","buildFromOrderedJs","jArray","format","oneListGroup","Builder","isAttribute","attrPrefixLen","processTextOrObjNode","indentate","tagEndChar","newLine","object","level","j2x","buildTextValNode","buildObjectNode","repeat","startsWith","prototype","jObj","arrayNodeName","call","Date","buildAttrPairStr","arrLen","listTagVal","listTagAttr","j","item","Ks","L","closeTag","tagEndExp","piClosingChar","fxp","XMLParser","XMLValidator","adaptationSets","mimeAudioObjs","forEach","videoFormat","mimeType","videoOnly","audioTrackId","mimeAudioObj","videoFormats","adapSet","_id","_lang","_mimeType","_startWithSAP","_subsegmentAlignment","Representation","isVideoFormat","Format","itag","_codecs","codec","_bandwidth","bitrate","_width","width","_height","height","_maxPlayoutRate","_frameRate","fps","BaseURL","url","SegmentBase","_indexRange","indexStart","indexEnd","Initialization","_range","initStart","initEnd","generate_representation_audio","AudioChannelConfiguration","_schemeIdUri","_value"],"mappings":"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","x_google_ignoreList":[1,2,3,4,5,6,7,8,9,10,11,12]}